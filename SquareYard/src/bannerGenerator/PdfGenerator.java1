package bannerGenerator;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.util.Date;

import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.GVTBuilder;
import org.apache.batik.bridge.UserAgent;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.svg.SAXSVGDocumentFactory;
import org.apache.batik.gvt.GraphicsNode;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.print.PrintTranscoder;
import org.apache.batik.util.XMLResourceDescriptor;
import org.w3c.dom.svg.SVGDocument;

import com.itextpdf.awt.PdfGraphics2D;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.ImgTemplate;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

public class PdfGenerator {

	private BaseFont bfBold;
	private BaseFont bf;

	public static void main(String[] args) throws Exception {
		String pdfFilename = ProjectConstants.generatedPdfFolder + "squareYard" + new Date() + ".pdf";
		pdfFilename = pdfFilename.replaceAll(" ", "_").replaceAll(":", "-");
		// new PdfGenerator().createPDF(pdfFilename);
		new PdfGenerator().testSVG(pdfFilename);
		try {
			Desktop.getDesktop().open(new File(pdfFilename));
		} catch (IOException e) {
			System.out.println(e);
		}
	}

	public void testSVG(String rootPath) throws Exception{
		String svg = "<svg>...</svg>";

		// Create the PDF document.
		// rootPath is the present working directory path.
		Document document = new Document();
		PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(new File(rootPath)));
		document.open();

		// Add paragraphs to the document...
		document.add(new Paragraph("Paragraph 1"));
		document.add(new Paragraph(" "));

		// Boilerplate for drawing the SVG to the PDF.
		String parser = XMLResourceDescriptor.getXMLParserClassName();
		SAXSVGDocumentFactory factory = new SAXSVGDocumentFactory(parser);
		UserAgent userAgent = new UserAgentAdapter();
		DocumentLoader loader = new DocumentLoader(userAgent);
		BridgeContext ctx = new BridgeContext(userAgent, loader);
		ctx.setDynamicState(BridgeContext.DYNAMIC);
		GVTBuilder builder = new GVTBuilder();
		PdfContentByte cb = writer.getDirectContent();

		// Parse the SVG and draw it to the PDF.
		Graphics2D g2d = new PdfGraphics2D(cb, 725, 400);
		SVGDocument chart = factory.createSVGDocument("", new StringReader(svg));
		GraphicsNode chartGfx = builder.build(ctx, chart);
		chartGfx.paint(g2d);
		g2d.dispose();

		// Add paragraphs to the document...
		document.add(new Paragraph("Paragraph 2"));
		document.add(new Paragraph(" "));

		document.close();
	}
	
	public void testSVG1(String pdfFilename) {
		Document dt = new Document();
		PdfWriter writer = null;
		String parser = XMLResourceDescriptor.getXMLParserClassName();
		SAXSVGDocumentFactory factory = new SAXSVGDocumentFactory(parser);
		try {
			int width = 1000;
			int height = 1000;

			ByteArrayOutputStream baos = new ByteArrayOutputStream(1024); // This is the pdf output stream drawn by svg

			writer = PdfWriter.getInstance(dt, baos);
			dt.open();
			PdfContentByte cb = writer.getDirectContent();
			PdfTemplate svgTemplate = cb.createTemplate(width, height);
			PdfGraphics2D g2d = new PdfGraphics2D(svgTemplate, width, height);
			SVGDocument city = factory.createSVGDocument("",new FileInputStream(ProjectConstants.iconsFolder + "Freesample.svg"));
			//SVGDocument city = factory.createSVGDocument("icons/Freesample.svg");
			UserAgentAdapter userAgentAdapter = new UserAgentAdapter();
			DocumentLoader documentLoader = new DocumentLoader(userAgentAdapter);
			BridgeContext ctx = new BridgeContext(userAgentAdapter, documentLoader);
			GVTBuilder builder = new GVTBuilder();
			GraphicsNode mapGraphics = builder.build(ctx, city);
			mapGraphics.paint(g2d);
			g2d.dispose();
			cb.addTemplate(svgTemplate, 0, 0);

			PdfReader svgReader = new PdfReader(baos.toByteArray());
			PdfImportedPage svgPage = writer.getImportedPage(svgReader, 1);
			Image instance = Image.getInstance(svgPage);
			instance.setWidthPercentage(80); // 80% of the image is scaled
			instance.setAlignment(Element.ALIGN_CENTER); // Image centered

			// The advantage of this is that it will be placed according to your previous
			// positioning, instead of worrying about image positioning problems.

			dt.add(instance);

		} catch (Exception e) {
			System.out.println("CreatePdf " + e);
		} finally {
			if (dt != null) {
				dt.close();
			}
			if (writer != null) {
				writer.close();
			}
		}
	}

	private void createPDF(String pdfFilename) {
		Document doc = new Document();
		PdfWriter docWriter = null;
		initializeFonts();

		try {
			String path = pdfFilename;
			docWriter = PdfWriter.getInstance(doc, new FileOutputStream(path));
			doc.addAuthor("Vaibhav");
			doc.addCreationDate();
			doc.addProducer();
			doc.addCreator("Vaibhav");
			doc.addTitle("SquareYard");
			doc.setPageSize(new com.itextpdf.text.Rectangle(8640, 3456));
			doc.open();
			PdfContentByte cb = docWriter.getDirectContent();
			generateStaticContent(cb);
			addSVG(cb);
		} catch (Exception ex) {
			System.out.println("error while creating pdf" + ex);
		} finally {
			if (doc != null) {
				doc.close();
			}
			if (docWriter != null) {
				docWriter.close();
			}
		}
		System.out.println("PDF generated successfully @ " + pdfFilename);
	}

	private void generateStaticContent(PdfContentByte cb) throws FileNotFoundException {
		cb.rectangle(0, 0, 5758, 3456);
		cb.setColorFill(BaseColor.GRAY);
		cb.fill();

	}

	private void addSVG(PdfContentByte cb) throws BadElementException, FileNotFoundException {
		int width = 100;
		int height = 100;
		PdfTemplate template = cb.createTemplate(width, height);
		// Graphics2D g2 = template.createGraphics(width,height);
		PdfGraphics2D g2d = new PdfGraphics2D(template, width, height);
		PrintTranscoder prm = new PrintTranscoder();
		TranscoderInput ti = new TranscoderInput(new FileInputStream(ProjectConstants.iconsFolder + "Freesample.svg"));
		prm.transcode(ti, null);

		/*
		 * PageFormat pg = new PageFormat(); Paper pp= new Paper(); pp.setSize(width,
		 * height); pp.setImageableArea(100, 100, width, height); pg.setPaper(pp);
		 * prm.print(g2d, pg, 0);
		 */
		cb.addTemplate(template, 0, 0);
		g2d.dispose();
		// return new ImgTemplate(template);
	}

	private void initializeFonts() {
		try {
			bfBold = BaseFont.createFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
			bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
		} catch (Exception e) {
			System.out.println("Error while initializing fonts");
		}
	}
}
